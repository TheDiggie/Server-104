// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BlueEyesWhiteDragon is Monster

constants:

   include blakston.khd

resources:
   blueeyes_dragon_name_rsc = "blue eyes white dragon"
   blueeyes_dragon_icon_rsc = blueeyes.bgf
   blueeyes_dragon_desc_rsc = \
      "My pride and my soul, my Blue-Eyes White Dragon! My shining dragon, decimator of all, "
      "which can only be summoned through my ultimate monster! Appear before me! Blue-Eyes Shining Dragon!"

   blueeyes_dragon_dead_icon_rsc = blueeyesX.bgf
   blueeyes_dragon_dead_name_rsc = "dead blue eyes white dragon"

   blue_eyes_ball = lightnin.bgf

   blueeyes_dragon_sound_hit = icedragonroar2.wav
   blueeyes_dragon_sound_miss = icedragonroar3.wav
   blueeyes_dragon_sound_death = icedragonroar1.wav
   blueeyes_dragon_sound_aware = icedragonroar4.wav

classvars:

   vrName = blueeyes_dragon_name_rsc
   vrIcon = blueeyes_dragon_icon_rsc
   vrDesc = blueeyes_dragon_desc_rsc
   vrDead_icon = blueeyes_dragon_dead_icon_rsc
   vrDead_name = blueeyes_dragon_dead_name_rsc

   viTreasure_type = TID_EARTH_DRAGON
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_SWITCHALOT
   viAttackRange = 312

   viSpeed = SPEED_FAST
   viAttack_type = ATCK_SPELL_SHOCK
   viAttack_spell = 0
   viAttributes = 0
   viLevel = 500
   viDifficulty = 10
   viVisionDistance = 40
   viKarma = 0
   viCashmin = 100000
   viCashmax = 200000
 
   vrSound_hit = blueeyes_dragon_sound_hit
   vrSound_miss = blueeyes_dragon_sound_miss
   vrSound_aware = blueeyes_dragon_sound_aware
   vrSound_death = blueeyes_dragon_sound_death

   // 1 in x chance to cast a spell.
   viSpellChance = 20

   viBaseSize = 5000

   // Enormous monster
   viEnemyRangeBonus = 64 * 2

   viBonusXP = 0
   viBonusTP = 0

   viHoldDurationMax = 28000  // Milliseconds.
   viHoldDurationMin = 17000  // Milliseconds.

properties:

   piAnimation = ANIM_NONE

   plAttackers = $  // [player,player....]
   
   piMax_mana = 100
   piSpellPower = 99
   
   piAttackSpeed = 4

   piHoldAttackChance = 13 // Chance he'll attack with a hold
   piHoldCounterChance = 6 // Chance he'll counter a spell or arrow with a hold
   piHoldDurationMax = 28000  // Milliseconds.
   piHoldDurationMin = 17000  // Milliseconds.

messages:

   Constructed()
   {
    
      plResistances = [ [-ATCK_SPELL_FIRE, 40],
                        [-ATCK_SPELL_SHOCK, 60],
                        [-ATCK_SPELL_ACID, 20],
                        [-ATCK_SPELL_COLD, 80],
                        [-ATCK_SPELL_UNHOLY, 70],
                        [-ATCK_SPELL_HOLY, 90],
                        [ATCK_WEAP_BLUDGEON, -10],
                        [ATCK_WEAP_SLASH, 20],
                        [ATCK_WEAP_THRUST, 20],
                        [ATCK_WEAP_PIERCE, 50]];

      plSpellBook =       [ [SID_FIRE_STORM,5,25, Random(90,99)],
                            [SID_SPORE_BURST,3,100, Random(90,99)],
                            [SID_SAND_STORM,1,80, Random(70,99)],
                            [SID_HEAT,1,100, Random(70,99)] ];

      propagate;
   }

   MonsterAttack(what = $)
   {
      // add in any attack animation calls
      Send(self,@DoSlash);
      Send(poOwner,@SomethingShot,#who=self,#target=what,#projectile=self,
           #flags=PROJ_FLAG_LIGHT_SOURCE);

      return;
   }

   DoSlash()
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendAnimation()
   {
      if piColor_Translation <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piColor_Translation);
      }

      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE, 4,150, 2,5, 2,6, 2,1);

         return;
      }

      // if no body animation
      propagate;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,200,2,1,2,4);

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,100,2,1,2,4);

      return;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   GetBossStatus()
   {
      return TRUE;
   }

   SomethingMoved(what=$)
   {
      if what <> self OR poOwner = $
      {
         propagate;
      }

      // Shake the ground when I take a step.
      // Small chance each person might lose any active trance.

      Send(poOwner,@Rumble,#duration=250,#disruption=50);
      
      propagate;
   }

   ReqSomethingAttack(what = $,victim = $,use_weapon = $)
   {
      if use_weapon <> $
         AND IsClass(use_weapon,&RangedWeapon)
         AND victim = self
         AND Random(1,piHoldCounterChance) = 1
      {
         Send(self,@MonsterCastAttackSpell,#What=what);

         return FALSE;
      }

      propagate;
   }

   MonsterCastAttackSpell(what=$)
   {
      local oSpell, iRandom, oTarget;

      if what = $
      {
         oTarget = poTarget;
      }
      else
      {
         oTarget = what;
      }

      // Vision distance check.
      if NOT Send(self,@CanSee,#what=poTarget)
      {
         return;
      }

      // Req attack and line of sight check.
      if NOT Send(poOwner,@ReqSomethingAttack,#what=self,
                  #victim=poTarget,#use_weapon=self)
         OR NOT Send(poOwner,@LineOfSight,#obj1=self,#obj2=oTarget)
      {
         return;
      }

      oSpell = Send(SYS,@FindSpellByNum,#num=SID_HOLD);
      iRandom = Random(piHoldDurationMin,piHoldDurationMax);

      Send(poOwner,@SomethingWaveRoom,#what=self,
            #wave_rsc=blueeyes_dragon_sound_hit);
      Send(self,@DoCast);
      Send(oSpell,@DoSpell,#what=self,#oTarget=oTarget,#iDuration=iRandom);
      if IsClass(oTarget,&User)
      {
         Send(oTarget,@EffectSendUserDurationAndXlat,#effect=EFFECT_FLASHXLAT,
               #duration=iRandom*1000);
      }

      // Do damage?

      return;
   }

   AngeredByWallElement(what=$)
   {
      local i, oSpell, lFinalTargets;
      
      foreach i in plAttackers
      {
         Send(i,@MsgSendUser,#message_rsc=angered_by_wall_element_msg,
                             #parm1=Send(what,@GetDef),
                             #parm2=Send(what,@GetName));
      }
      
      Send(poOwner,@DeleteWallsAroundBattler,#who=self);
      
      oSpell = Send(SYS,@FindSpellByNum,#num=SID_EARTHQUAKE);
      lFinalTargets = Send(oSpell,@GetTargets,#who=poOwner);
      Post(oSpell,@CastSpell,#who=poOwner,#iSpellPower=40,
            #lTargets=lFinalTargets);

      return;
   }

   GetProjectileSpeed()
   {
      return 7;
   }

   SendProjectileAnimation()
   {
      AddPacket(1, ANIMATE_CYCLE, 4, 40, 2, 2, 2, 3);

      return;
   }

   GetProjectileIcon()
   {
      return blue_eyes_ball;
   }

   GetProjectileLightFlags()
   {
      // General lighting information.
      return LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC;
   }

   GetProjectileLightIntensity()
   {
      // Fairly small light radius for projectile.  Out of 255 levels.
      return 200;
   }

   GetProjectileLightColor()
   {
      // Color is orange.
      return LIGHT_WHITE;
   }

   CanEvilTwin()
   {
      return FALSE;
   }
   
end
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
