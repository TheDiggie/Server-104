// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
JewelofFroz is AttackModifier

constants:

   include blakston.khd

   ANIM_FLASH = 2

resources:

   include frozjewl.lkod

   frozjewel_name_rsc = "Jewel of Froz"
   frozjewel_icon_rsc = frozjewl.bgf
   frozjewel_desc_rsc = \
      "This gem was created by the great alchemist, Froz, in a secret process "
      "known only to him. Rumor has it that it is a conduit for mystical "
      "aggression, using raw mana to boost elemental touch spells. "
      "Your hand tingles when you hold it."
   jof_condition_exc = " is in immaculate condition."
   jof_condition_good = " is lightly scratched."
   jof_condition_med = \
      " is moderately scratched, and appears slightly opaque."
   jof_condition_poor = \
      " is heavily scratched and seems to be losing its glow."
   frozjewel_desc_broken_rsc = "The jewel seems ordinary and dull."
   frozjewel_broken = "The Jewel of Froz now seems quite ordinary."
   frozjewel_recharge_rsc = \
      "Your Jewel of Froz gains strength from the life force of your slain foe."
classvars:

   vrName = frozjewel_name_rsc
   vrIcon = frozjewel_icon_rsc

   viUse_type = ITEM_USE_HAND
   viUse_amount = 1

   viHits_init_min = 350
   viHits_init_max = 550

   viValue_average = 400
   viBulk = 10
   viWeight = 15

   vbShow_condition = TRUE

   vrCondition_exc = jof_condition_exc
   vrCondition_good = jof_condition_good
   vrCondition_med = jof_condition_med
   vrCondition_poor = jof_condition_poor
   vrCondition_broken = frozjewel_desc_broken_rsc

   viManaLossJewel = 1
   vbDoubleManaCost = FALSE
   viAttack_bonus = 200
   vbScaleHitrollBonus = TRUE

properties:

   vrDesc = frozjewel_desc_rsc
   viItem_type = ITEMTYPE_GEM

   piAnimation = ANIM_NONE

   // These allow setting JOFs up individually for testing, or just
   // assigning the default values from the class variable in Constructor.
   piManaLossJewel = 1
   pbDoubleManaCost = FALSE
   piAttack_bonus = 200
   pbScaleHitrollBonus = TRUE

messages:

   Constructor()
   {
      piManaLossJewel = viManaLossJewel;
      pbDoubleManaCost = vbDoubleManaCost;
      piAttack_bonus = viAttack_bonus;
      pbScaleHitrollBonus = vbScaleHitrollBonus;

      propagate;
   }

   ReqUseSomething(what=$)
   {
      local i, iJewelNumber;

      if IsClass(what,&Weapon)
         OR IsClass(what,&Lute)
         OR IsClass(what,&BrawlGloves)
      {
         if Send(poOwner,@TryUnuseItem,#what=self)
         {
            propagate;
         }
         else
         {
            return FALSE;
         }
      }

      if IsClass(what,&Shield)
         OR IsClass(what,&JewelOfFroz)
      {
         iJewelNumber = 0;

         foreach i in Send(poOwner,@GetPlayerUsing)
         {
            if IsClass(i,&JewelOfFroz)
               OR IsClass(i,&Book)
            {
               iJewelNumber = iJewelNumber + 1;
            }
         }

         if iJewelNumber > 1
         {
            if Send(poOwner,@TryUnuseItem,#what=self)
            {
               propagate;
            }
            else
            {
               return FALSE;
            }
         }
      }

      propagate;
   }

   ModifyHitRoll(who=$,what=$,hit_roll=$,stroke_obj=$)
   {
      local iBonus, iScale;

      if piHits <= 0
      {
         return hit_roll;
      }

      if stroke_obj <> $
         AND IsClass(stroke_obj,&Spell)
      {
         Send(self,@DoFlash);
      }

      // Option to scale hitroll bonus by hitpoints. Default on.
      if pbScaleHitrollBonus
      {
         iScale = Send(who,@GetBaseMaxHealth) * 100
                        / (100 + Send(who,@GetRawStamina));
         iBonus = piAttack_bonus * iScale / 100;

         return hit_roll + iBonus;
      }

      // If no scaling, just return the hitroll + full bonus.
      return hit_roll + piAttack_bonus;
   }

   ModifyDamage(who=$,what=$,damage=$,stroke_obj=$)
   {
      local i, iMana;

      --piHits;

      if piHits <= 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=frozjewel_broken,
               #parm1=Send(self,@GetCapDef),#parm2=vrName);
         Send(poOwner,@TryUnuseItem,#what=self);
         vrDesc = frozjewel_desc_broken_rsc;

         return damage;
      }

      if IsClass(stroke_obj,&Spell)
      {
         iMana = 0;
         if pbDoubleManaCost
         {
            foreach i in Send(who,@GetPlayerUsing)
            {
               if IsClass(i,&JewelOfFroz)
               {
                  // 1 mana default for one jewel, 4 mana total for two.
                  iMana = iMana + piManaLossJewel;
               }
            }
         }
         else
         {
             // Default 1 per jewel.
            iMana = iMana + piManaLossJewel;
         }

         if Send(who,@LoseMana,#amount=iMana) <> 0
         {
            // Add big damage if we spent the mana. Adjust it by how strong
            // the wielder is relative to their maximum potential. Throwaway
            // characters will get very little benefit.
            return damage + Send(self,@GetHealthBonus,#who=who);
         }

         // Add a small amount of damage.
         return damage + Random(1,2);
      }

      return damage;
   }

   //
   // Item description code.
   //

   GetHitBonus()
   {
      if poOwner <> $
         AND IsClass(poOwner,&Player)
      {
         return Send(self,@ModifyHitRoll,#who=poOwner,#hit_roll=0);
      }

      return piAttack_bonus;
   }

   GetMinDamage()
   {
      local iPlayerHp, iMinDamage;

      iMinDamage = 1;

      if poOwner <> $
         AND IsClass(poOwner,&Player)
      {
         iPlayerHp = Send(poOwner,@GetBaseMaxHealth);
         if iPlayerHp < 100
         {
            iMinDamage = 1;
         }
         else if iPlayerHp < 125
         {
            iMinDamage = 2;
         }
         else
         {
            iMinDamage = 3;
         }
      }

      return iMinDamage;
   }

   GetMaxDamage()
   {
      local iPlayerHp, iMaxDamage;

      iMaxDamage = 5;

      if poOwner <> $
         AND IsClass(poOwner,&Player)
      {
         iPlayerHp = Send(poOwner,@GetBaseMaxHealth);
         if iPlayerHp < 50
         {
            iMaxDamage = 1;
         }
         else if iPlayerHp < 75
         {
            iMaxDamage = 2;
         }
         else if iPlayerHp < 125
         {
            iMaxDamage = 3;
         }
         else
         {
            iMaxDamage = 5;
         }
      }

      return iMaxDamage;
   }

   //
   // End item desciption code.
   //

   GetHealthBonus(who=$)
   {
      local hp;

      hp = Send(who,@GetBaseMaxHealth);
      if hp < 50
      {
         return 1;
      }
      if hp < 75
      {
         return Random(1,2);
      }
      if hp < 100
      {
         return Random(1,3);
      }
      if hp < 125
      {
         return Random(2,3);
      }

      return Random(3,5);
   }

   WeaponHitTarget()
   {
      return;
   }

   DoFlash()
   {
      piAnimation = ANIM_FLASH;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_NONE;

      return;
   }

   SendAnimation()
   {
      local iFlags;

      iFlags = piItem_flags & ITEM_PALETTE_MASK;
      if iFlags <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,iFlags);
      }

      AddPacket(1,ANIMATE_NONE,2,2);

      return;
   }

   SendLookAnimation()
   {
      local iFlags;

      iFlags = piItem_flags & ITEM_PALETTE_MASK;
      if iFlags <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,iFlags);
      }

      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   SendInventoryAnimation()
   {
      local iFlags;

      iFlags = piItem_flags & ITEM_PALETTE_MASK;
      if iFlags <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,iFlags);
      }

      if piAnimation = ANIM_FLASH
      {
         AddPacket(1,ANIMATE_ONCE,4,300,2,3,2,3,2,1);
      }
      else
      {
         AddPacket(1,ANIMATE_NONE,2,1);
      }

      return;
   }

   KilledSomething(what=$)
   "Called when our owner killed something. Recharges hits on the JOF."
   {
      local i;
	  
      if (what = $
         OR NOT Send(SETTINGS_OBJECT,@CanFrozRechargeOnKill)
         OR (IsClass(what,&Monster) AND Send(what,@IsIllusion)))
      {
         return;
      }

	  foreach i in Send(poOwner,@GetPlayerUsing)
	  {
		 if IsClass(i,&JewelOfFroz)
		 {
		    Send(i,@Recharge);
		 }
 	  }   

      return;
   }
   
   Recharge()
   {
      piHits = Send(self,@GetMaxHits);
	  
      if (poOwner <> $)
      {
         Send(poOwner,@MsgSendUser,#message_rsc=frozjewel_recharge_rsc);
      }
	  
	  return;
   }
   
end
////////////////////////////////////////////////////////////////////////////////
