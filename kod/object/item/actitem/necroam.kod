// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.
NecromancerAmulet is ActiveItem

// originally derived from necklace, moved here to

constants:

   include blakston.khd

//   HUNGER_1 = 2   //one session (assuming 3-4 hours of play per day)
//   HUNGER_2 = 4   //one to two sessions
//   HUNGER_3 = 6   //two sessions
//   HUNGER_4 = 8   //two to three sessions
//   HUNGER_5 = 10  //three sessions

   //BASE_HUNGER_GAIN = 2 // in units of FineHunger
   //                     // gain should be equivalent to one 60hp neutral player solo-kill per session-day (3-4 hrs)
   //                     //     (i.e. iGain modifier = 108)

resources:

   include necroam.lkod

   necamulet_name_rsc = "Amulet of the Three"
   necamulet_icon_rsc = necamlet.bgf
   necamulet_desc_rsc = \
      "There is something deeply disturbing about this amulet.  When you "
      "look at it in the corner of your eye, you can almost see the evil "
      "pouring forth from it."

   necamulet_newbie_pickup_good = \
      "Your guardian angel says, \"That amulet is a thing of great "
      "evil.  Even holding it in your possession would corrupt your soul, "
      "and eventually destroy you.\""
   necamulet_newbie_pickup_evil = \
      "Your guardian angel says, \"That amulet holds far too much "
      "power for you to contain.  You must stay away from it, for now.\""

   necamulet_holding_damage_wearing = \
      "The unholy energy streaming from the Amulet of the Three seeps into "
      "you, racking your body with pain as it corrupts your soul.  You must "
      "do something before it destroys you!"
   necamulet_holding_damage = \
      "The unholy energy streaming from the Amulet of the Three seeps into "
      "you, racking your body with pain as it corrupts your soul."
   necamulet_holding_unworthy_wearing = \
      "The unholy energy streaming from the Amulet of the Three seeps into "
      "you, filling you with pleasure even as it racks you with pain.  You "
      "must somehow remove it before it destroys you!"
   necamulet_holding_unworthy = \
      "The unholy energy streaming from the Amulet of the Three seeps into "
      "you, filling you with pleasure even as it racks you with pain.  You "
      "feel a strong compulsion to put the amulet on and channel its full "
      "power, but you know somehow that it would surely destroy you if you did."
   necamulet_holding_tempt = \
      "The unholy energy streaming from the Amulet of the Three seeps into "
      "you, filling you with pleasure.  You cannot help but fantasize how "
      "wonderful it would feel to put the amulet on and channel its full power."

   necamulet_warning = \
      "As you begin to place the amulet around your neck, you feel a strong "
      "sense of foreboding...  this is not likely to be a reversible act."
   necamulet_used_unworthy = \
      "As you put the amulet on, a wave of power flows through your body, "
      "setting every nerve on fire with pleasure and pain.  The amount of "
      "energy flowing into your body is enormous, and growing with every "
      "passing second - the coppery taste of fear fills your mouth as you "
      "realize you may not be able to contain it all."
   necamulet_used_rsc = \
      "As you put the amulet on, a wave of power flows through your body, "
      "setting every nerve on fire with pleasure, leaving every cell "
      "irrevocably changed in its wake.  Somewhere far inside your mind, "
      "underneath the feeling of power, you can also feel something else, "
      "however - a kind of hunger gnawing at you, growing with every "
      "passing second."

   necamulet_try_unuse_rsc = \
      "As you try to pull the amulet from your neck, you feel it tug "
      "painfully at your insides, as if it were magically tethered to your "
      "innards, grafted permanently onto the blackest part of your soul."

   necamulet_unused_rsc = \
      "As the Amulet of the Three leaves your body, you feel something else "
      "rip free inside you, turning your internal organs to jelly."

   necamulet_hunger_1 = "You're starting to feel a little hungry."
   necamulet_hunger_2 = "You're definitely hungry now."
   necamulet_hunger_3 = \
      "You are very hungry now.  The hunger is a burning knot somewhere "
      "inside your skull.  It is time to feed."
   necamulet_hunger_4 = \
      "Your brain is on fire with but one impulse:  you must feed.  Every "
      "moment passes like molasses, an eternity of suffering."
   necamulet_hunger_5 = \
      "Your body is now in so much pain that you can feel yourself pulling "
      "away from it, drifting out and away.  You jerk yourself back with "
      "great effort - you must feed soon, or you will surely be lost."

   necamulet_illusion_slipped = \
      "The illusion masking your true features slips, revealing your ghastly "
      "appearance in all its obscene glory!"
   necamulet_illusion_restored = \
      "Your horrific appearance has once again been cloaked in illusion."

   necamulet_hunger_assuaged = \
      "You feel your amulet absorbing %s%s's life energy.  It washes through "
      "you in waves, slaking your hunger and leaving you feeling strengthened."

   necamulet_cant_eat = \
      "You attempt to gag down %s%s, to no avail.  Mortal food will no "
      "longer assuage the dark hunger that burns within your unholy body."

   necamulet_cant_pay = \
      "Your Dark Queen reaches out to grasp your amulet.  "
      "She holds it for a moment, then pushes you away in disgust.\n"
      "~kQueen Venya'cyr tells you, \"~rWeak fool. Thou art too hungry "
      "thyself to satisfy mine own hunger.~k\""
   necamulet_pay_ouch = \
      "Your Dark Queen reaches out to grasp your amulet.  "
      "You gasp as she draws your life essence out of you into herself, "
      "leaving you drained and weak.\n"
      "~kQueen Venya'cyr tells you, \"~rI thank thee, my loyal subject.  "
      "Thou had best go and feed thyself now.~k\""
   necamulet_pay = \
      "Your Dark Queen reaches out to grasp your amulet.  "
      "You gasp as she draws your life essence out of you into herself.\n"
      "~kQueen Venya'cyr tells you, \"~rAh, a truly refreshing soul thou "
      "hast.  Thou servest me well, dark one!~k\""

   necamulet_drops = \
      "As your essence dissolves away from this plane of existence, the "
      "amulet slips out of your hands and drops to the ground."

   ao3_no_spiritw = "The amulet forces your weapon out of your grip!"
classvars:

   viIndefinite = ARTICLE_AN

   vrName = necamulet_name_rsc
   vrIcon = necamulet_icon_rsc
   vrDesc = necamulet_desc_rsc

   viValue_average = 40000

   viBulk = 25
   viWeight = 25
   viUse_type = ITEM_USE_NECK
   viItem_type = ITEMTYPE_NECKLACE | ITEMTYPE_SPECIAL

   viUse_Amount = 1

   viDamage_min = 10
   viDamage_max = 20

   viLight_change = 50

properties:

   plStatmods = $

   pbIn_use = False
   pbWarned = False
   piHunger = 0
   piFineHunger = 0
   ptHungerTimer = $
   ptHoldingDamage = $
   piHoldingDamageInterval = 10 * 1000     // ten seconds
   piHpWorthyThreshold = 50
   piKarmaWorthyThreshold = 1

   pbIllusioned = TRUE
   piSavedSkinColor = $

   pbOrderDisbanded = FALSE
   pbCounted = FALSE

   piKarma = -100

   poLastEnemyToAttack = $

messages:

   Constructor()
   {
      pbCounted = TRUE;
      Send(Send(SYS,@GetNecromancerBalance),@IncrementAmuletCount);

      propagate;
   }

   ReqNewOwner(what = $)
   {
      local i;
      
      if IsClass(what,&StorageBox)
         OR IsClass(what,&SafetyDepositBox)
      {
         return FALSE;
      }


      if what <> $ AND IsClass(what,&Player)
      {
         if Send(what,@FindHoldingActive,#class=&HunterSword) <> $
         {
            return FALSE;
         }
         
         if Send(what,@FindHoldingActive,#class=&NecromancerAmulet) <> $
         {
            return FALSE;
         }
      }

      // This is to prevent us from being dropped in a cheap death.
      if pbIn_use
      {
         if Send(poOwner,@IsDead)
         {
            if pbOrderDisbanded
            {
               return FALSE;
            }
         }
      }

      if what = $
         OR NOT IsClass(what,&User)
      {
         propagate;
      }
      // Don't let them pick it up if they can't pvp!
      if NOT Send(what,@CanPlayerPvP)
      {
         if Send(what,@GetKarma) < 0
         {
            Send(what,@MsgSendUser,#message_rsc=necamulet_newbie_pickup_evil);
         }
         else
         {
            Send(what,@MsgSendUser,#message_rsc=necamulet_newbie_pickup_good);
         }

         return FALSE;
      }

      propagate;
   }

   NewOwner(what = $)
   {
      local oSpiritS, oSpiritH;

      pbWarned = FALSE;

      if ptHoldingDamage <> $
      {
         DeleteTimer(ptHoldingDamage);
         ptHoldingDamage = $;
      }

      if what <> $
         AND IsClass(what,&User)
      {
         Post(self,@HoldingDamageTrigger);
      }

      if what <> $
         AND IsClass(what,&User)
      {
         oSpiritH = Send(what,@FindUsing,#class=&SpiritualHammer);
         oSpiritS = Send(what,@FindUsing,#class=&SpiritualSword);

         if oSpiritH <> $ OR oSpiritS <> $
         {
            if oSpiritH <> $
            {
               Send(what,@TryUnuseItem,#what=oSpiritH);
            }

            if oSpiritS <> $
            {
               Send(what,@TryUnuseItem,#what=oSpiritS);
            }

            Send(what,@MsgSendUser,#message_rsc = ao3_no_spiritw);
         }
      }

      propagate;
   }

   HoldingDamageTrigger()
   {
      ptHoldingDamage = $;
      if NOT IsClass(poOwner,&User)
      {
         return;
      }
      
      if (Send(poOwner,@GetKarma) < piKarmaWorthyThreshold)
         AND (Send(poOwner,@GetBaseMaxHealth) >= piHpWorthyThreshold)
      {
         if pbIn_Use
         {
            return;
         }

         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_holding_tempt);
         ptHoldingDamage = CreateTimer(self,@HoldingDamageTrigger,piHoldingDamageInterval);

         return;
      }
      else
      {
         if (Send(poOwner,@GetKarma) < piKarmaWorthyThreshold)
         {
            if pbIn_Use
            {
               Send(poOwner,@MsgSendUser,#message_rsc=necamulet_holding_unworthy_wearing);
            }
            else
            {
               Send(poOwner,@MsgSendUser,#message_rsc=necamulet_holding_unworthy);
            }
         }
         else
         {
            if pbIn_Use
            {
               Send(poOwner,@MsgSendUser,#message_rsc=necamulet_holding_damage_wearing);
            }
            else
            {
               Send(poOwner,@MsgSendUser,#message_rsc=necamulet_holding_damage);
            }
            //Send(poOwner,@LoseKarma,#amount=(1 + (pbIn_Use*3)));
         }
         if Send(poOwner,@AssessDamage,#what=self,
                  #damage=(Random(1,3)+pbIn_Use*8),#report=FALSE) = $
         {
            // We killed them off... heh heh heh.
            if pbIn_Use
            {
               // Unusing it kills the owner, we don't want to do that yet.
               //Send(poOwner,@UnuseItem,#what=self);
            }
            Send(Send(poOwner,@GetOwner),@SomethingKilled,
                  #what=self,#victim=poOwner);
            Send(poOwner,@Killed,#what=self);
            Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=self);
         }
         else
         {
            ptHoldingDamage = CreateTimer(self,@HoldingDamageTrigger,
                                    piHoldingDamageInterval);
         }
      }

      return;
   }

   ReqSomethingUse(what = $,use_item = $)
   {
      local oWeaponUsed;

      if use_item <> self
      {
         return TRUE;
      }

      if IsClass(what,&User)
         AND what = poOwner
      {
         oWeaponUsed = Send(what,@LookupPlayerWeapon);
         if oWeaponUsed <> $
            AND (Send(what,@FindHoldingActive,#class=&HunterSword) <> $
               OR Send(oWeaponUsed,@GetAttributeData,#ItemAtt=WA_PUNISHER) <> $)
         {
            return FALSE;
         }

         if pbWarned = FALSE
         {
            Send(what,@MsgSendUser,#message_rsc=necamulet_warning);
            pbWarned = TRUE;

            return FALSE;
         }

        return TRUE;
      }

      return FALSE;
   }

   NewUsed(what = $)
   "Affect permanent stat changes here."
   {
      pbIn_use = TRUE;
      pbIllusioned = TRUE;
      plStatmods = [ 0, 0, 0, 0, 0, 0 ];

      if Send(poOwner,@GetKarma) < piKarmaWorthyThreshold
         AND Send(poOwner,@GetBaseMaxHealth) >= piHpWorthyThreshold
      {
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_used_rsc);
      }
      else
      {
         Send(poOwner, @MsgSendUser, #message_rsc = necamulet_used_unworthy);
      }

      Send(self,@AdjustStats);
      Send(self,@AdjustColor);
      ptHungerTimer = CreateTimer(self,@HungerTrigger,
                           Send(Send(SYS,@GetNecromancerBalance),@GetHungerInterval));

      propagate;
   }

   AdjustStats()
   {
      local iKarma, iKarmaFactor, iHungerFactor, iLichFactor, iModifier, iStatMod;

      if poOwner = $
      {
         Debug("tried to adjuststats with no owner!");

         return;
      }

      iKarma = piKarma;

      iKarmaFactor =  (100 * (iKarma - piKarmaWorthyThreshold))
                           / (-100 - piKarmaWorthyThreshold);

      // iHungerFactor =( 100 * (piHunger- HUNGER_5))/(-HUNGER_5 - HUNGER_5);
      iHungerFactor = ( 100 * (piHunger - HUNGER_5 ))/(-2 * HUNGER_5);

      // iModifier goes from 0 to 100
      // 100 is the max, but it can go below 0.
      // At piHunger = 0 and Karma = 65, iModifier = 50
      iLichFactor = 0;
      // Bonus for being allied with the lich, ranges from -10 to +15,
      // depending on how paid-up you are on rent.
      if Send(poOwner,@GetGuild) <> $
         AND IsClass(Send(poOwner,@GetGuild),&NecromancerGuild)
      {
         iLichFactor = 15 - (5 * Send(Send(poOwner,@GetGuild),@GetRentDue));
         iLichFactor = Bound(iLichFactor,-10,15);
      }
      iModifier = (2 * iHungerFactor + iKarmaFactor) / 3 + iLichFactor;

      if plStatmods = $
      {
         plStatmods = [0,0,0,0,0,0];
      }

      iStatMod = (110 * iModifier / 1000);
      if (iStatMod -  Nth(plStatmods,2)) <> 0
      {
         iStatMod = Send(poOwner,@AddIntellect,#points=(iStatMod - Nth(plStatmods,2)))
                           + Nth(plStatmods,2);
         SetNth(plStatmods,2,iStatMod);
      }

      iStatMod = (110 * iModifier / 1000);
      if (iStatMod - Nth(plStatmods,6)) <> 0
      {
         iStatMod = Send(poOwner,@AddMysticism,#points=(iStatMod - Nth(plStatmods,6)))
                           + Nth(plStatmods,6);
         SetNth(plStatmods,6,iStatMod);
      }

      iStatMod = (-35 * iModifier / 1000) - 2;
      if (iStatMod -  Nth(plStatmods,1)) <> 0
      {
         iStatMod = Send(poOwner,@AddMight,#points=(iStatMod - Nth(plStatmods,1)))
                           + Nth(plStatmods,1);
         SetNth(plStatmods,1,iStatMod);
      }

      iStatMod = (-35 * iModifier / 1000) - 2;
      if (iStatMod - Nth(plStatmods,4)) <> 0
      {
         iStatMod = Send(poOwner,@AddAim,#points=(iStatMod - Nth(plStatmods,4)))
                           + Nth(plStatmods,4);
         SetNth(plStatmods,4,iStatMod);
      }

      iStatMod = (59 * iModifier / 1000) - 2;
      if (iStatMod - Nth(plStatmods,5)) <> 0
      {
         iStatMod = Send(poOwner,@AddStamina,#points=(iStatMod - Nth(plStatmods,5)))
                           + Nth(plStatmods,5);
         SetNth(plStatmods,5,iStatMod);
      }

      iStatMod = (59 * iModifier / 1000) - 2;
      if (iStatMod - Nth(plStatmods,3)) <> 0
      {
         iStatMod = Send(poOwner,@AddAgility,#points=(iStatMod - Nth(plStatmods,3)))
                           + Nth(plStatmods,3);
         SetNth(plStatmods,3,iStatMod);
      }

      if NOT pbIllusioned
      {
         if Random(0,HUNGER_5) > piHunger
         {
            Send(self,@ReplaceIllusions);
         }
      }
      else
      {
         if Random(0, HUNGER_5) < piHunger
         {
            Send(self,@DispelIllusions);
         }
      }

      return;
   }

   RestoreStats(who = $)
   {
      if who = $
      {
         if poOwner <> $
         {
            who = poOwner;
         }
         else
         {
            Debug("No one to restore stats on!!");
         }
      }

      if plStatmods = $
      {
         return;
      }

      Send(who,@AddIntellect,#points=(-Nth(plStatmods,2)));
      Send(who,@AddMysticism,#points=(-Nth(plStatmods,6)));
      Send(who,@AddMight,#points=(-Nth(plStatmods,1)));
      Send(who,@AddAim,#points=(-Nth(plStatmods,4)));
      Send(who,@AddStamina,#points=(-Nth(plStatmods,5)));
      Send(who,@AddAgility,#points=(-Nth(plStatmods,3)));
      plStatmods = $;

      return;
   }

   GetBaseSpellModifier(oSpell=$)
   {
      return 20;
   }
   
   AdjustColor()
   {
      local Xlat;

      if piHunger > HUNGER_5
      {
         Xlat = PT_GRAY_TO_RED;
      }
      else
      {
         if piHunger > (HUNGER_5*3/5)
         {
            Xlat = PT_GRAY_TO_KRED;
         }
         else
         {
            if piHunger > (HUNGER_5*1/5)
            {
               Xlat = 0;
            }
            else
            {
               if piHunger > (-HUNGER_5*1/5)
               {
                  Xlat = PT_GRAY_TO_KGRAY;
               }
               else
               {
                  if piHunger > (-HUNGER_5*3/5)
                  {
                     Xlat = PT_GRAY_TO_BLACK;
                  }
                  else
                  {
                     Xlat = PT_GRAY_TO_KPURPLE;
                  }
               }
            }
         }
      }
      Send(self,@SetPaletteTranslation,#translation =XlAT);
      Send(poOwner,@SomethingChanged,#what=self);

      return;
   }

   DispelIllusions()
   {
      if NOT pbIn_Use
      {
         return;
      }

      if NOT pbIllusioned
      {
         return;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=necamulet_illusion_slipped);
      // Send(poOwner,@RemoveHair,#what=self);
      if piSavedSkinColor = $
      {
         // Save skin color.
         piSavedSkinColor = Send(poOwner,@GetSkinColor);
         // Turn skin white, eyes red.
         Send(poOwner,@SetSkinColor,#color=PT_BLUE_TO_ASHEN);
      }
      else
      {
         Debug("Tried to DispelIllusions with a skin color already saved.");
      }
      pbIllusioned = FALSE;

      return;
   }

   ReplaceIllusions(notify=TRUE)
   {
      if NOT pbIn_Use
      {
         return;
      }

      if pbIllusioned
      {
         return;
      }

      if notify
      {
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_illusion_restored);
      }

      // Send(poOwner,@ResetHair);
      if piSavedSkinColor <> $
      {
         // Restore skin color.
         Send(poOwner,@SetSkinColor,#color=piSavedSkinColor);
         piSavedSkinColor = $;
      }
      else
      {
         Debug("Tried to ReplaceIllusions with no saved skin color.");
      }
      pbIllusioned = TRUE;

      return;
   }

   HungerTrigger()
   {
      ptHungerTimer = $;
      if NOT pbIn_use
         OR NOT IsClass(poOwner,&User)
      {
         return;
      }

      ptHungerTimer = CreateTimer(self,@HungerTrigger,
                           Send(Send(SYS,@GetNecromancerBalance),@GetHungerInterval));
      
      if NOT Send(poOwner,@IsLoggedOn)
      {
         return;
      }

      // Don't accrue hunger or associated penalties if we're already
      // being slammed with holding penalties.
      if ptHoldingDamage <> $
      {
         return;
      }

      // Check that owner still satisfies amulet restrictions.
      if NOT ((Send(poOwner,@GetKarma) < piKarmaWorthyThreshold)
            AND (Send(poOwner,@GetBaseMaxHealth) >= piHpWorthyThreshold))
         AND ptHoldingDamage = $
      {
         Send(self,@HoldingDamageTrigger);
      }

      piFineHunger = piFineHunger + 1;
      if piFineHunger = 60
      {
         piFineHunger = 0;
         piHunger = piHunger + 1;
      }
      Send(self,@AdjustStats);
      Send(self,@AdjustColor);

      if piHunger > HUNGER_5
      {
         // Start doing serious damage, losing vigor.
         Send(poOwner,@AddExertion,#amount = 20000); // 2 vigor points
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_hunger_5);

         if Send(poOwner,@AssessDamage,#what=self,#damage=Random(5,10),
                  #report=FALSE) = $
         {
            // We killed someone off... heh heh heh.
            if pbIn_Use
            {
               // Unusing it kills the owner, we don't want to do that yet.
               //Send(poOwner,@UnuseItem,#what=self);
            }
            Send(Send(poOwner,@GetOwner),@SomethingKilled,#what=self,#victim=poOwner);
            Send(poOwner,@Killed,#what=self);
            Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=self);
         }

         return;
      }

      if piHunger > HUNGER_4
      {
         // Start doing mild damage.
         if (piFineHunger % 5) = 0
         {
            Send(poOwner,@MsgSendUser,#message_rsc=necamulet_hunger_4);
         }

         if Send(poOwner,@AssessDamage,#what=self,#damage=Random(1,5),
                  #report=FALSE) = $
         {
            // We killed someone off... heh heh heh.
            if pbIn_Use
            {
               // Unusing it kills the owner, we don't want to do that yet.
               //Send(poOwner,@UnuseItem,#what=self);
            }
            Send(Send(poOwner,@GetOwner),@SomethingKilled,#what=self,#victim=poOwner);
            Send(poOwner,@Killed,#what=self);
            Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=self);
         }

         return;
      }

      if piHunger > HUNGER_3
      {
         if (piFineHunger % 15) = 0
         {
            Send(poOwner,@MsgSendUser,#message_rsc=necamulet_hunger_3);
         }

         return;
      }

      if piHunger > HUNGER_2
      {
         if (piFineHunger % 30) = 0
         {
            Send(poOwner,@MsgSendUser,#message_rsc=necamulet_hunger_2);
         }

         return;
      }

      if piHunger > HUNGER_1
      {
         if piFineHunger = 0
         {
            Send(poOwner,@MsgSendUser,#message_rsc=necamulet_hunger_1);
         }

         return;
      }

      return;
   }

   SomethingKilled(what=$,victim=$,use_weapon=$)
   {
      local iGain, oPlayerOwner;
      
      if poOwner = $
      {
         return;
      }

      if (NOT IsClass(victim,&Monster))
         AND (NOT IsClass(victim,&User))
      {
         Debug("SomethingKilled called with an invalid victim: ",
               Send(victim,@GetName));

         return;
      }

      oPlayerOwner = Send(poOwner,@GetOwner);
      if oPlayerOwner = $
      {
         return;
      }

      // No reward for Arena deaths.  (This will also catch other 'safe'
      // areas should they be added.)
      if Send(oPlayerOwner,@SafePlayerAttack)
         AND Send(oPlayerOwner,@InPlay,#what=poOwner)
      {
         return;
      }

      // Assuage hunger according to a couple modifiers:
      //   greater gain if you're the killer (3:1)
      //   greater gain if victim is a player (2:1)
      //   greater gain if victim has good karma
      //     (karma 100:karma -100 = 2:1 - continuum of values)
      //   greater gain for more powerful victims
      //     (difficulty 9:difficulty 1 = 9:1 - continuum of values)
      //     (hp 100: hp 20 = 5:1 - continuum of values)
      if pbIn_Use
         AND poOwner <> $
         AND IsClass(poOwner,&User)
         AND victim <> poOwner
      {
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_hunger_assuaged,
               #parm1=Send(victim,@GetDef),#parm2=Send(victim,@GetName));
         iGain = Send(Send(SYS,@GetNecromancerBalance),@CalculateAmuletHungerSatisfied,
                     #NecAm=self,#killer=what,#victim=victim);
         Send(self,@SatisfyHunger,#amount=iGain);
      }

      return;
   }

   ActivateCheapDeath()
   {
      pbOrderDisbanded = TRUE;

      return;
   }

   OwnerKilled(what=$)
   {
      local oGuild;

      if poOwner = $
      {
         Debug("OwnerKilled called on ",self," with $ owner!");
         Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=self);

         return;
      }

      // If the Order disbanded (or any other cheap death),
      // let them keep their amulet.
      if pbOrderDisbanded
      {
         pbOrderDisbanded = FALSE;
      }
      else
      {
         // If they are just holding the item, do nothing.
         if NOT pbIn_Use
         {
            return;
         }

         oGuild = Send(poOwner,@GetGuild);
         if oGuild <> $
            AND IsClass(oGuild,&NecromancerGuild)
         {
            Send(oGuild,@MemberKilled,#victim=poOwner,#killer=what);
         }

         // Instead of deleting the amulet, we put it back in circulation.
         // Post(self,@Delete);
         Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=self);
      }

      return;
   }

   SatisfyHunger(amount=0)
   {
      // Gain vigor.
      Send(poOwner,@AddExertion,#amount=-amount*10000);

      // Satsify hunger.
      piFineHunger = piFineHunger - amount;
      while piFineHunger < 0
      {
         piHunger = piHunger - 1;
         piFineHunger = piFineHunger + 60;
      }

      // Can 'save up', but only to a point.
      piHunger = Bound(piHunger,-HUNGER_5,$);
      Send(self,@AdjustStats);
      Send(self,@AdjustColor);

      return;
   }

   Delete()
   {
      if pbCounted
      {
         pbCounted = FALSE;
         Send(Send(SYS,@GetNecromancerBalance),@DecrementAmuletCount);
      }

      if ptHungerTimer <> $
      {
         DeleteTimer(ptHungerTimer);
         ptHungerTimer = $;
      }
      if ptHoldingDamage <> $
      {
         DeleteTimer(ptHoldingDamage);
         ptHoldingDamage = $;
      }

      // Have to post this so that in case the item gets deleted out of
      // the blue while in use, it still has the stat mod data when
      // delete() propagates down to unusing the item.
      Post(self,@PostDelete);

      propagate;
   }

   PostDelete()
   {
      plStatmods = $;

      return;
   }

   ReqLeaveOwner()
   "Don't allow new owner while we're in use."
   {
      // if not IsClass(poOwner,&user) or Send(poOwner,@PlayerIsImmortal) {propagate;}
      if NOT IsClass(poOwner,&User)
      {
         propagate;
      }

      if pbIn_use
      {
         Post(self,@TortureOwner);

         return FALSE;
      }

      propagate;
   }

   ReqUnuse()
   "When something tries to unuse the Amulet, it will not come off, and will"
   "teach the user a lesson in the process."
   {
      // if Send(poOwner,@PlayerIsImmortal) {return True;}
      //Post(self,@TortureOwner);

      //return FALSE;
	  
	  return TRUE;
   }

   TortureOwner()
   {
      if poOwner = $
      {
         return;
      }

      if NOT IsClass(poOwner,&Player)
      {
         return;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=necamulet_try_unuse_rsc);
      if Send(poOwner,@AssessDamage,#what=self,
               #damage=Random(viDamage_min,viDamage_max),#report=FALSE) = $
      {
         // We killed someone off... heh heh heh.
         if pbIn_Use
            AND Send(self,@DropOnDeath)
         {
            // Unusing it kills the owner, we don't want to do that yet.
            //Send(poOwner,@UnuseItem,#what=self);
            
            // Amulet goes back into circulation.
            Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=self);
         }

         Send(Send(poOwner,@GetOwner),@SomethingKilled,
               #what=self,#victim=poOwner);
         Send(poOwner,@Killed,#what=self);
      }

      return;
   }

   NewUnused(what = $, Recalibrate = FALSE)
   "When something that can break the curse unuses the item."
   {
      local oGuild;

      if ptHungerTimer <> $
      {
         DeleteTimer(ptHungerTimer);
         ptHungerTimer = $;
      }

      Send(self,@ReplaceIllusions,#notify=FALSE);
      Send(self,@RestoreStats,#who=what);

      // The player has to die to take this off - the death code handles
      // sending info to the guild.
      //if NOT Recalibrate
      //{
      //   oGuild = Send(what,@GetGuild);
      //   if oGuild <> $
      //      AND IsClass(oGuild,&NecromancerGuild)
      //   {
      //      Send(oGuild,@MemberKilled,#victim=what,#killer=what);
      //   }
      //}

      pbIn_use = FALSE;
      pbIllusioned = FALSE;

      propagate;
   }

   SendAnimation()
   {
      AddPacket(1, ANIMATE_NONE, 2, 2);

      return;
   }

   SendInventoryAnimation()
   {
      if pbIn_Use
         AND (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      AddPacket(1,ANIMATE_NONE,2,2);

      return;
   }

   SendLookAnimation()
   {
      if pbIn_Use
         AND (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   ReqUseSomething(what = $)
   {
      if IsClass(what,&Necklace)
	  {
	     propagate;
	  }
	  
      if IsClass(what,&Necklace)
         OR IsClass(what,&NecromancerAmulet)
      {
         if Send(poOwner,@TryUnuseItem,#what=self)
         {
            propagate;
         }

         return FALSE;
      }

      if IsClass(what,&Food)
         AND IsClass(what,&Spideye)
      {
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_cant_eat,
               #parm1=Send(what,@GetDef),#parm2=Send(what,@GetName));

         return FALSE;
      }

      propagate;
   }

   ReqUse(what=$)
   {
      if NOT Send(what,@CanAdvance)
      {
         Send(what,@DontInterfere);

         return FALSE;
      }

      propagate;
   }

   LichTributeDrain()
   {
      local iAmountDrained;

      if piHunger >= HUNGER_4
      {
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_cant_pay);

         return FALSE;
      }

      if piHunger > 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_pay_ouch);
         iAmountDrained = HUNGER_4 - piHunger;
         piHunger = HUNGER_4;

         return iAmountDrained;
      }

      Send(poOwner,@MsgSendUser,#message_rsc=necamulet_pay);
      iAmountDrained = HUNGER_3 - piHunger;
      piHunger = HUNGER_3;
      Send(self,@AdjustStats);
      Send(self,@AdjustColor);

      return iAmountDrained;
   }

   //NecromancerRosterRequest(oLich = $)
   //{
   //   if pbIn_Use
   //      AND poOwner <> $
   //      AND IsClass(poOwner,&User)
   //      AND oLich <> $
   //   {
   //      Send(oLich,@NecromancerRosterReply,#oNecro=poOwner);
   //   }
//
   //   return;
   //}

   //LichKilled()
   //{
   //   Post(self,@PostLichKilled);
//
   //   return;
   //}
//
   //PostLichKilled()
   //{
   //   local oNecro, iDropIndex, oGuildh15, iDropRow, iDropCol, oNecBal,
   //         oTreasure, iTeleportThresholdValue;
//
   //   if pbIn_Use
   //      AND poOwner <> $
   //      AND IsClass(poOwner,&User)
   //   {
   //      oNecro = poOwner;
   //      oNecBal = Send(SYS,@GetNecromancerBalance);
//
   //      foreach oTreasure in Send(oNecro,@GetHolderActive)
   //      {
   //         if oTreasure <> self
   //            AND Send(oTreasure,@DropOnDeath)
   //         {
   //            Send(oNecBal,@PutObjectInNecromancerTreasure,#what=oTreasure);
   //         }
   //      }
//
   //      foreach oTreasure in Send(oNecro,@GetHolderPassive)
   //      {
   //         if Send(oTreasure,@DropOnDeath)
   //         {
   //            Send(oNecBal,@PutObjectInNecromancerTreasure,#what=oTreasure);
   //         }
   //      }
//
   //      Send(oNecBal,@StartPlacingNecromancerTreasure);
//
   //      // Mow kill the necromancer.
   //      if Send(oNecro,@GetOwner) <> $
   //      {
   //         Send(Send(oNecro,@GetOwner),@SomethingKilled,
   //               #what=self,#victim=oNecro);
   //      }
   //      Send(oNecro,@Killed,#what=self);
   //   }
//
   //   Send(self,@Delete);
//
   //   return;
   //}

   OrderOfNecromancersDisbanded()
   {
      local oOwner, oGuild, oMaster;

      if pbIn_Use
         AND poOwner <> $
         AND IsClass(poOwner,&User)
      {
         oGuild = Send(poOwner,@GetGuild);
         if oGuild <> $
            AND IsClass(oGuild,&NecromancerGuild)
         {
            if Send(oGuild,@GetRank,#who=poOwner) = RANK_MASTER
               AND Length(Send(oGuild,@GetMemberList)) > 1
            {
               // Kill the GM last.
               return;
            }

            Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=self);
            Send(oGuild,@MemberKilled,#victim=poOwner,#killer=self);

            if Send(poOwner,@GetOwner) <> $
            {
               Send(Send(poOwner,@GetOwner),@SomethingKilled,
                     #what=self,#victim=poOwner);
            }

            oOwner = poOwner;

            Send(poOwner,@Killed,#what=self);

            if Length(Send(oGuild,@GetMemberList)) = 1
            {
               // Just the master left in the guild, kill him off!
               oMaster = First(First(Send(oGuild,@GetMemberList)));
               if oMaster <> oOwner
               {
                  Send(&NecromancerAmulet,@KillGM,#oMaster=oMaster);
               }
            }
         }
         else
         {
            // they lose 2/3 of their HP.
            Send(poOwner,@AssessDamage,#what=self,
                  #damage=(Send(poOwner,@GetHealth)*2/3),#report=FALSE);
         }
      }

      return;
   }

   KillGM(oMaster=$)
   {
      local oGuild,i,oAmulet;

      if oMaster = $
      {
         Debug("KillGM called with $ GM for necromancer guild!");

         return;
      }

      if poOwner <> oMaster
      {
         return;
      }

      oAmulet = $;
      if Send(oMaster,@IsUsingA,#Class=&NecromancerAmulet)
      {
         foreach i in Send(oMaster,@GetPlayerUsing)
         {
            if IsClass(i,&NecromancerAmulet)
            {
               oAmulet = i;

               break;
            }
         }
         Post(Send(SYS,@GetNecromancerBalance),@PlaceAmulet,#what=oAmulet);
      }
      else
      {
         Debug("Order disbanded:  GM not wearing an amulet!");
      }

      oGuild = Send(oMaster,@GetGuild);
      Send(oGuild,@MemberKilled,#victim=oMaster,#killer=self);
      if Send(oMaster,@GetOwner) <> $
      {
         Send(Send(oMaster,@GetOwner),@SomethingKilled,
               #what=self,#victim=oMaster);
      }
      Send(oMaster,@Killed,#what=self);

      return;
   }

   UserLogoff()
   {
      if NOT pbIn_Use
      {
         Send(poOwner,@MsgSendUser,#message_rsc=necamulet_drops);
         Send(Send(poOwner,@GetOwner),@NewHold,#what=self,
               #new_row=Send(poOwner,@GetRow),#new_col=Send(poOwner,@GetCol),
               #fine_row=Send(poOwner,@GetFineRow),
               #fine_col=Send(poOwner,@GetFineCol));
      }

      propagate;
   }

   DestroyDisposable()
   {
      local oNecBal;

      // Called every 2 minutes, so this means an average of 30 minutes.
      if Random(1,15) = 1
      {
         oNecBal = Send(SYS,@GetNecromancerBalance);
         if NOT Send(oNecBal,@AmuletIsAtSpawnPoint,#oAmulet=self)
         {
            Post(oNecBal,@PlaceAmulet,#what=self);
         }
      }

      return;
   }

   CanWeaken()
   "Brittle will not work."
   {
      return FALSE;
   }

   CanSwap()
   "Swap will never yank this."
   {
      return FALSE;
   }

   CanShatter()
   "this will not shatter."
   {
      return FALSE;
   }

   CanEnchant()
   {
      return FALSE;
   }

   CanBeGivenToNPC()
   "NPCs will refuse to take this item if offered to them."
   {
      return FALSE;
   }

   CanBeStoredInVault()
   {
      return FALSE;
   }

   ReqDMDelete()
   "Item will not be deleted by DM Clear Inventory command."
   {
      return FALSE;
   }

   DropOnDeath()
   {
      local oRoom;

      if poOwner = $
      {
         Debug("DropOnDeath called on ",Send(self,@GetName)," with null owner!");

         return FALSE;
      }

      oRoom = Send(poOwner,@GetOwner);

      if oRoom = $
      {
         return FALSE;
      }

      if Send(poOwner,@PossessesA,#class=&Token)
         OR (Send(oRoom,@SafePlayerAttack)
            AND Send(oRoom,@inPlay,#what=poOwner))
      {
         return FALSE;
      }

      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
