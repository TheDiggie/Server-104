// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////S///////////////////////////////////////////////////////
ArmorOfGort is PersonalEnchantment

constants:

   include blakston.khd

resources:

   include gort.lkod

   ArmorOfGort_name_rsc = "armor of Gort"
   ArmorOfGort_icon_rsc = igort.bgf
   ArmorOfGort_desc_rsc = \
      "Surrounds the caster with a powerful field which deflects "
      "damage from extreme blows.  "
      "Requires two blue dragon scales to cast."
   gort_enchantment_rsc = \
      "\n\nYour current armor of Gort enchantment adds 1-%i armor or "
      "reduces non-magical damage to 15, partially magical damage to 20, and "
      "fully magical damage to 25.  Only the better of these two effects "
      "applies.  Armor of Gort modifies damage received before any "
      "other armor or spells."
   ArmorOfGort_already_enchanted_rsc = "You already have the Armor of Gort."

   ArmorOfGort_on_rsc = \
      "Your skin feels taut as the Armor of Gort forms around you."
   ArmorOfGort_off_rsc = "Your Armor of Gort dissipates."
   ArmorOfGort_success_rsc = \
      "%s%s's skin tightens as the Armor of Gort forms."

   ArmorOfGort_spell_intro = \
      "Kraanan Level 5: Magical armor that protects the caster."

   gort_phys_red_rsc = \
      "%s%s's armor of Gort hardens, protecting %s from much of the force "
      "of your attack."
   gort_part_mag_red_rsc = \
      "%s%s's armor of Gort tightens, mitigating some of your partially "
      "magical attack."
   gort_mag_red_rsc = \
      "%s%s's armor of Gort glimmers, offering a slight protection "
      "against your magical attack."

classvars:

   vrName = ArmorOfGort_name_rsc
   vrIcon = ArmorOfGort_icon_rsc
   vrDesc = ArmorOfGort_desc_rsc

   vrAlreadyEnchanted = ArmorOfGort_already_enchanted_rsc
   vrEnchantment_On = ArmorOfGort_On_rsc
   vrEnchantment_Off = ArmorOfGort_Off_rsc
   vrSuccess = ArmorOfGort_Success_rsc

   viSpell_num = SID_ARMOR_OF_GORT

   vrSpell_intro = ArmorOfGort_spell_intro

   viMana = 10

   viSpell_level = 5
   viSchool = SS_KRAANAN

   viChance_To_Increase = 20
   viMeditate_ratio = 50
   viFlash = FLASH_GOOD_SELF

   viDefensive = TRUE

properties:

   // The effectiveness of purge on the target spell as a percentage.
   // 100 will cause purge to remove its entire spellpower, 0 will
   // prevent purge from removing this spell.
   viPurgeFactor = 85

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&BlueDragonScale,2],plReagents);

      return;
   }

   GetDuration(iSpellPower=0)
   {
      local iDuration;

      iDuration = iSpellPower/8 + 1;
      // Convert to milliseconds
      iDuration = iDuration * 60 * 1000;

      return iDuration;
   }

   GetStateValue(who=$,iSpellPower=0,Target=$)
   {
      Send(Target,@AddDefenseModifier,#what=self);

      return iSpellPower;
   }

   PriorityModifyDefenseDamage(who=$,what=$,damage=$,atype=0,aspell =0)
   {
      local iSpellPower, iAbsorbed, iMax, iFinalDamage, iFinalAbsorbed;

      // Don't bother with 0 damage hits.
      if (damage = 0)
      {
         return damage;
      }

      iSpellPower = Send(who,@GetEnchantedState,#what=self);
      iMax = 1500;
      iAbsorbed = bound(random(0,iSpellPower*4),0,400);

      if aspell <> 0 OR (atype & ATCK_WEAP_MAGIC)
      {
         // Reduce damage if part of the damage is spell
         if atype <> 0
         {
            // Only 1/2 of the damage reduction if we're doing both weapon
            //  and spell damage types.
            iAbsorbed = iAbsorbed / 2;
            iMax = 2000;
         }
         else
         {
            // If we're doing pure spell damage, we get no reduction.
            iAbsorbed = 0;
            iMax = 2500;
         }
      }
      
      iFinalDamage = Bound(damage-iAbsorbed,1,iMax);
      iFinalAbsorbed = damage - iFinalDamage;
      
      if IsClass(what,&User)
         AND iFinalAbsorbed > 0
      {
         if aspell <> 0 OR (atype & ATCK_WEAP_MAGIC)
         {
            if atype <> 0
            {
               Send(what,@MsgSendUser,#message_rsc=gort_part_mag_red_rsc,
                     #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName));
            }
            else
            {
               Send(what,@MsgSendUser,#message_rsc=gort_mag_red_rsc,
                     #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName),
                     #parm3=Send(who,@GetHimHer));
            }
         }
         else
         {
            Send(what,@MsgSendUser,#message_rsc=gort_phys_red_rsc,
                  #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName),
                  #parm3=Send(who,@GetHimHer));
         }
      }

      return iFinalDamage;
   }

   ModifyDefenseDamage(who=$,what=$,damage=$,atype=0,aspell=0)
   {
      return damage;
   }

   EndEnchantment(who=$,report=TRUE,state=0)
   {
      Send(who,@RemoveDefenseModifier,#what=self);

      propagate;
   }

   EffectDesc(who=$)
   {
      AddPacket(4,gort_enchantment_rsc,
                4,Send(who,@GetEnchantedState,#what=self) / 25);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
