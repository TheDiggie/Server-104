// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
QuestX is PassiveObject 

constants:

   include blakston.khd
   include protocol.khd

resources:

classvars:

properties:

   // Index of the applicable quest template in QuestEngine::plQuestTemplates
   piQuestTemplateIndex    = 0

   // List of questers participating
   plQuesters              = $

   // Which node of the quest we're currently on in quest template's plQuestNodes
   piQuestNodeCounter      = 0

   // The current questnode object
   poQuestNode             = $

   // local list of quest node indices, to allow random order
   // of traversal (NOT yet implemented)
   //  plQuestNodes            = $

   // We keep a copy here so that other quests can modify the defaults
   // read from the template
   plPlayerRestrict2       = $

messages:

   Constructor()
   {
      propagate;
   }

   Init(template_index=0,report=FALSE)
   "Returns template_index if successful, 0 if unsuccessful."
   {
      local iFirstNodeTemplateIndex, bSuccess, oQE;

      oQE = Send(SYS,@GetQuestEngine);

      if (Send(oQE,@IsValidQuestTemplate,#index=template_index) <> 1)
      {
         return 0;
      }

      piQuestTemplateIndex = template_index;

      plPlayerRestrict2 = ListCopy(Send(oQE,@GetQuestPlayerRestrictions2,
                                       #index=piQuestTemplateIndex));

      // Create and initialize first node
      piQuestNodeCounter = 1;

      iFirstNodeTemplateIndex = Send(oQE,@GetNextQuestNode,
                                    #quest_template=piQuestTemplateIndex);

      poQuestNode = Create(&QuestNode);
      bSuccess = Send(poQuestNode,@Init,#index=iFirstNodeTemplateIndex,
                     #owning_quest=self,#waiting_for_players=TRUE);

      if (bSuccess = 0)
      {
         Debug("Trouble creating questnode of type ",
               iFirstNodeTemplateIndex,"!");
      }
      else if report
      {
         Debug("Quest created. Begin at room #",Send(Send(Send(poQuestNode,
               @GetDestNPC),@GetOwner),@GetRoomNum));
         Debug( "First node is",iFirstNodeTemplateIndex );
      }

      return template_index;
   }

   CheckPlayerCriteria(quester_wannabe=$)
   "Return TRUE if player eligible, otherwise FALSE. NOTE: if you change "
   "something here, change it in QuestTemplate::ShowRequirements too."
   {
      local iPlayerRestrict, oCurrentNPC, oQuestEngine, oQuest, oQuester,
            iRestrict, iKarma, lHistory, iHistory, iSucceed, iFail, iRecentTime,
            iFaction, iPower, iTime, iR2, bDebug, oLich, i, bHasNegativeBoon,
            oNecroGuild, oQuestTemplate;

      oQuestEngine = Send(SYS,@GetQuestEngine);
      iPlayerRestrict = Send(oQuestEngine,@GetQuestPlayerRestrictions,
                              #index=piQuestTemplateIndex);
      oCurrentNPC = Send(poQuestNode,@GetDestNPC);

      bDebug = Send(oQuestEngine,@GetDebugStatus);

      if bDebug
      {
         Debug("Checking restrictions on a quest of type ",piQuestTemplateIndex,
               " for ",Send(quester_wannabe,@GetName));
      }

      // Never assign a quest to the same person twice!
      if bDebug > 1
      {
         Debug("Checking that ",Send(quester_wannabe,@GetName),
               " isn't already on a quest of type ",piQuestTemplateIndex);
      }

      foreach oQuest in Nth(Send(oQuestEngine,@GetQuestTemplate,
                              #index=piQuestTemplateIndex),QT_ACTIVE_QUESTS)
      {
         foreach oQuester in Send(oQuest,@GetQuesters)
         {
            //if bDebug
            //{
            //   Debug("Found a quest assigned to ",Send(oQuester,@getName));
            //}
            if quester_wannabe = oQuester
            {
               if bDebug
               {
                  Debug("failed duplicate quest check.");
               }

               return FALSE;
            }
         }
      }

      // Are there karma restrictions?
      if (iPlayerRestrict & Q_PLAYER_KARMA_MASK)
      {
         if bDebug > 1
         {
            Debug("Checking karma restrictions.");
         }

         iRestrict = (iPlayerRestrict & Q_PLAYER_KARMA_MASK);
         if Send(oCurrentNPC,@KarmaSame,#who=quester_wannabe)
         {
            if (iRestrict = Q_PLAYER_KARMA_DIFFERENT)
            {
               if bDebug
               {
                  Debug("failed Q_PLAYER_KARMA_DIFFERENT.");
               }

               return FALSE;
            }
         }
         else
         {
            if (iRestrict = Q_PLAYER_KARMA_SAME)
            {
               if bDebug
               {
                  Debug("failed Q_PLAYER_KARMA_SAME.");
               }

               return FALSE;
            }
         }

         if iRestrict = Q_PLAYER_KARMA_GOOD
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_KARMA_GOOD.");
            }

            return TRUE;
         }

         if iRestrict = Q_PLAYER_KARMA_EVIL
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_KARMA_EVIL.");
            }

            return FALSE;
         }
//
         //if ((iRestrict = Q_PLAYER_KARMA_NEUTRAL)
         //   AND (Abs(iKarma) > 10))
         //{
         //   if bDebug
         //   {
         //      Debug("failed Q_PLAYER_KARMA_NEUTRAL.");
         //   }
//
         //   return FALSE;
         //}
      }

      // Are there faction restrictions?
      if (iPlayerRestrict & Q_PLAYER_FACTION_MASK)
      {
         if bDebug > 1
         {
            Debug("checking faction restrictions");
         }

         iRestrict = (iPlayerRestrict & Q_PLAYER_FACTION_MASK);
         iFaction = Send(quester_wannabe,@GetFaction);

         if ((iRestrict = Q_PLAYER_FACTION_DUKE)
            AND (iFaction <> FACTION_DUKE))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_DUKE.");
            }

            return FALSE;
         }

         if ((iRestrict = Q_PLAYER_FACTION_NEUTRAL)
            AND (iFaction <> FACTION_NEUTRAL))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_NEUTRAL.");
            }

            return FALSE;
         }

         if ((iRestrict = Q_PLAYER_FACTION_PRINCESS)
            AND (iFaction <> FACTION_PRINCESS))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_PRINCESS.");
            }

            return FALSE;
         }

         if ((iRestrict = Q_PLAYER_FACTION_REBEL)
            AND (iFaction <> FACTION_REBEL))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_REBEL.");
            }

            return FALSE;
         }

         if ((iRestrict = Q_PLAYER_FACTION_SAME)
            AND (iFaction <> Send(oCurrentNPC,@GetFaction)))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_SAME.");
            }

            return FALSE;
         }

         if ((iRestrict = Q_PLAYER_FACTION_DIFFERENT)
            AND (iFaction = Send(oCurrentNPC,@GetFaction)))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_DIFFERENT.");
            }

            return FALSE;
         }

         iPower = Send(Send(SYS,@GetParliament),@GetPower,#faction=iFaction);
         if ((iRestrict = Q_PLAYER_FACTION_IN)
            AND (iPower < FACTION_IN_POWER))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_IN.");
            }

            return FALSE;
         }

         if ((iRestrict = Q_PLAYER_FACTION_OUT)
            AND (iPower > FACTION_OUT_POWER))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_FACTION_OUT.");
            }

            return FALSE;
         }
      }

      // Are there PK restrictions?
      if (iPlayerRestrict & Q_PLAYER_KILL_MASK)
      {
         if bDebug > 1
         {
            Debug("checking pk restrictions");
         }

         iRestrict = (iPlayerRestrict & Q_PLAYER_KILL_MASK);
         if (iRestrict & Q_PLAYER_NEWBIE)
         AND (Send(quester_wannabe,@CheckPlayerFlag,
                  #flag=PFLAG_PKILL_ENABLE) = PFLAG_PKILL_ENABLE)
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_NEWBIE.");
            }

            return FALSE;
         }

         if (iRestrict & Q_PLAYER_NOTNEWBIE)
            AND (Send(quester_wannabe,@CheckPlayerFlag,
                     #flag=PFLAG_PKILL_ENABLE) <> PFLAG_PKILL_ENABLE)
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_NOTNEWBIE.");
            }

            return FALSE;
         }

         if (iRestrict & Q_PLAYER_MURDERER)
            AND (Send(quester_wannabe,@CheckPlayerFlag,
                     #flag=PFLAG_MURDERER) <> PFLAG_MURDERER)
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_MURDERER.");
            }

            return FALSE;
         }

         if (iRestrict & Q_PLAYER_NOTMURDERER)
            AND (Send(quester_wannabe,@CheckPlayerFlag,
                     #flag=PFLAG_MURDERER) = PFLAG_MURDERER)
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_NOTMURDERER/Q_PLAYER_LAWFUL.");
            }

            return FALSE;
         }

         if (iRestrict & Q_PLAYER_OUTLAW)
            AND (Send(quester_wannabe,@CheckPlayerFlag,
                     #flag=PFLAG_OUTLAW) <> PFLAG_OUTLAW)
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_OUTLAW.");
            }

            return FALSE;
         }

         if (iRestrict & Q_PLAYER_NOTOUTLAW)
         {
            if Send(SYS,@IsPKAllowed)
            {
               if (Send(quester_wannabe,@CheckPlayerFlag,
                        #flag=PFLAG_OUTLAW) = PFLAG_OUTLAW)
               {
                  if bDebug
                  {
                     Debug("failed Q_PLAYER_NOTOUTLAW/Q_PLAYER_LAWFUL.");
                  }

                  return FALSE;
               }
            }
            else
            {
               // Substitute for outlaw status in happyland
               if Send(quester_wannabe,@IsEnchanted,#byClass=&Boon)
               {
                  bHasNegativeBoon = FALSE;
                  foreach i in Send(quester_wannabe,@GetEnchantmentList)
                  {
                     if IsClass(Nth(i,2),&Boon)
                     {
                        if Nth(i,3) < 0
                        {
                           bHasNegativeBoon = TRUE;
                           break;
                        }
                     }
                  }
                  if bHasNegativeBoon
                  {
                     if bDebug
                     {
                        Debug("failed Q_PLAYER_NOTOUTLAW/Q_PLAYER_LAWFUL ",
                              "through happyland means (negative boon).");
                     }

                     return FALSE;
                  }
               }
            }
         }
      }

      oQuestTemplate = Send(oQuestEngine,@GetQuestTemplateObject,
                              #index=piQuestTemplateIndex);

      // Are there quest history restrictions?
      if (iPlayerRestrict & Q_PLAYER_QUEST_MASK)
      {
         if bDebug > 1
         {
            Debug("checking quest history restrictions.");
         }

         iRecentTime = Send(oQuestTemplate,@GetQuestHistoryRecentTime);
         iTime = Send(quester_wannabe,@GetTimeLoggedIn);
         iRestrict = (iPlayerRestrict & Q_PLAYER_QUEST_MASK);
         lHistory = Send(quester_wannabe,@GetQuestHistory,
                        #index=piQuestTemplateIndex);

         iSucceed = 0;
         iFail = 0;
         iHistory = 0;
         if iTime < 0
         {
            iTime = 0;
         }

         if (lHistory <> $)
         {
            iHistory = First(lHistory) & (~QUEST_HISTORY_MASK);
            iSucceed = Nth(lHistory,2);
            iFail = Nth(lHistory,3);
         }

         if (iSucceed = 0)
         {
            // To handle case where TimeLoggedIn < iRecentTime.
            iSucceed = -iRecentTime;
         }

         if (iFail = 0)
         {
            // To handle case where TimeLoggedIn < iRecentTime.
            iFail = - iRecentTime;
         }

         if bDebug > 1
         {
            Debug("time since failed", iTime-iFail);
            Debug("time since succeeded", iTime-iSucceed);
         }


         if (((iRestrict & Q_PLAYER_NOTSUCCEEDED_RECENTLY)
               = Q_PLAYER_NOTSUCCEEDED_RECENTLY)
            AND ((iTime - iSucceed) < iRecentTime))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_NOTSUCCEEDED_RECENTLY.");
            }

            return FALSE;
         }

         if (((iRestrict & Q_PLAYER_NOTFAILED_RECENTLY)
               = Q_PLAYER_NOTFAILED_RECENTLY)
         AND ((iTime - iFail) < iRecentTime))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_NOTSUCCEEDED_RECENTLY.");
            }

            return FALSE;
         }

         //if ((iRestrict = Q_PLAYER_NOTTRIED_RECENTLY)
         //   AND (((iTime - iFail) < iRecentTime)
         //      OR ((iTime - iSucceed) < iRecentTime)))
         //{
         //   return FALSE;
         //}

         if (((iRestrict & Q_PLAYER_NOTSUCCEEDED) = Q_PLAYER_NOTSUCCEEDED)
            AND ((iHistory & QUEST_HISTORY_SUCCESS) <> 0))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_NOTSUCCEEDED.");
            }

            return FALSE;
         }

         if (((iRestrict & Q_PLAYER_NOTFAILED) = Q_PLAYER_NOTFAILED )
            AND ((iHistory & QUEST_HISTORY_FAILURE) <> 0))
         {
            if bDebug
            {
               Debug("failed Q_PLAYER_NOTFAILED.");
            }

            return FALSE;
         }

         //if ((iRestrict = Q_PLAYER_NOTTRIED) AND (iHistory <> 0))
         //{
         //   return FALSE;
         //}
      }

      // Can player join a faction?
      if ((iPlayerRestrict & Q_PLAYER_INTRIGUING)
         AND (NOT Send(quester_wannabe,@PlayerIsIntriguing)))
      {
         if bDebug
         {
            Debug("failed Q_PLAYER_INTRIGUING.");
         }

         return FALSE;
      }

      // Is player a guildmaster?
      if (iPlayerRestrict & Q_PLAYER_GUILDMASTER)
         AND (Send(quester_wannabe,@GetGuild) = $
            OR (Send(Send(quester_wannabe,@GetGuild),@GetGuildMaster)
                     <> quester_wannabe)
            OR (NOT Send(Send(quester_wannabe,@GetGuild),@HasGuildColors)))
      {
         if bDebug
         {
            Debug("failed Q_PLAYER_GUILDMASTER.");
         }

         return FALSE;
      }

      // Is player a guild officer?
      if (iPlayerRestrict & Q_PLAYER_GUILDOFFICER)
         AND (Send(quester_wannabe,@GetGuild) = $
            OR (NOT Send(Send(quester_wannabe,@GetGuild),@IsOfficer,
                        #who=quester_wannabe))
            OR (NOT Send(Send(quester_wannabe,@GetGuild),@HasGuildColors)))
      {
         if bDebug
         {
            Debug("failed Q_PLAYER_GUILDOFFICER.");
         }

         return FALSE;
      }

      if (iPlayerRestrict & Q_PLAYER_PVP_ENABLED)
         AND Send(quester_wannabe,@CheckPlayerFlag,#flag=PFLAG_PERMA_NO_PVP)
      {
         if bDebug
         {
            Debug("failed Q_PLAYER_PVP_ENABLED.");
         }

         return FALSE;
      }

      if bDebug > 1
      {
         Debug("Checking plPlayerRestrict2 restrictions.");
      }

      foreach iR2 in plPlayerRestrict2
      {
         if First(iR2) = Q_R2_QN_ASSIGNABLE
         {
            if Nth(iR2, 2) = FALSE
            {
               return FALSE;
            }
         }

         if First(iR2) = Q_R2_IS_GUILD_MEMBER_OF
         {
            if (Send(quester_wannabe,@GetGuild) <> Nth(iR2, 2))
               OR (Nth(iR2, 2) = $) // If quester's guild = $, we return false.
            {
               if bDebug
               {
                  Debug("failed Q_R2_IS_GUILD_MEMBER_OF.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_IS_PLAYER
         {
            if quester_wannabe <> Nth(iR2, 2)
            {
               if bDebug
               {
                  Debug("failed Q_R2_IS_PLAYER.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_HAS_SKILL
         {
            if NOT Send(quester_wannabe,@HasSkill,#num=Nth(iR2, 2))
               OR (Send(quester_wannabe,@GetSkillAbility,
                        #Skill_num=Nth(iR2, 2)) < Nth(iR2, 3))
            {
               if bDebug
               {
                  Debug("failed Q_R2_HAS_SKILL.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_HAS_SPELL
         {
            if NOT Send(quester_wannabe,@HasSpell,#num=Nth(iR2, 2))
               OR (Send(quester_wannabe,@GetSpellAbility,
                        #Spell_num=Nth(iR2, 2)) < Nth(iR2, 3))
            {
               if bDebug
               {
                  Debug("failed Q_R2_HAS_SPELL.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_HAS_SPELL_SCHOOL
         {
            if Send(quester_wannabe,@GetNumSpellsInSchool,
                     #school=Nth(iR2, 2)) < Nth(iR2, 3)
            {
               if bDebug
               {
                  Debug("failed Q_R2_HAS_SPELL_SCHOOL.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_HAS_ITEM
         {
            if NOT Send(quester_wannabe,@PossessesA,#class=Nth(iR2, 2))
               AND (Send(quester_wannabe,@FindHoldingActive,
                        #class=Nth(iR2, 2)) = $)
            {
               if bDebug
               {
                  Debug("failed Q_R2_HAS_ITEM.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_DOES_NOT_HAVE_ITEM
         {
            if Send(quester_wannabe,@PossessesA,#class=Nth(iR2, 2))
               OR (Send(quester_wannabe,@FindHoldingActive,
                        #class=Nth(iR2, 2)) <> $)
            {
               if bDebug
               {
                  Debug("failed Q_R2_DOES_NOT_HAVE_ITEM.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_USING_ITEM
         {
            if NOT Send(quester_wannabe,@IsUsingA,#class=Nth(iR2, 2))
            {
               if bDebug
               {
                  Debug("failed Q_R2_USING_ITEM.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_HAS_HEALTH_LEVEL
         {
            if Send(quester_wannabe,@GetBaseMaxHealth) < Nth(iR2, 2)
            {
               if bDebug
               {
                  Debug("failed Q_R2_HAS_HEALTH_LEVEL.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_NUM_AMULETS
         {
            if Send(Send(SYS,@GetNecromancerBalance),
                     @GetNumAmulets) < Nth(iR2, 2)
            {
               if bDebug
               {
                  Debug("failed Q_R2_NUM_AMULETS.");
               }

               return FALSE;
            }

            if Send(quester_wannabe,@GetGuild) <> $
            {
               if bDebug
               {
                  Debug("failed Q_R2_NUM_AMULETS. - guilded");
               }

               return FALSE;
            }

            //oLich = Send(Send(SYS,@FindRoomByNum,#num=RID_INNERSAN),
            //              @FindHoldingActive,#class=&DeadLich);
            //if oLich = $ or Send(oLich,@GetNumAmulets) < Nth(iR2, 2) {
            //   if bDebug { Debug("failed Q_R2_NUM_AMULETS."); }
            //   return FALSE;
            //}
         }

         if First(iR2) = Q_R2_NECRO_GUILD_ACTIVE
         {
            oNecroGuild = Send(Send(SYS,@GetNecromancerBalance),@GetNecroGuild);
            if (oNecroGuild = $
                  AND Nth(iR2,2) > 0)
               OR (oNecroGuild <> $
                  AND Nth(iR2,2) < 1)
            {
               if bDebug
               {
                  Debug("failed Q_R2_NECRO_GUILD_ACTIVE.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_HAS_COMPLETED_QUEST_ID
         {
            lHistory = Send(quester_wannabe,@GetQuestHistory,#index=Nth(iR2,2));
            iHistory = 0;

            if (lHistory <> $)
            {
               iHistory = First(lHistory) & (~QUEST_HISTORY_MASK);
            }

            if ((iHistory & QUEST_HISTORY_SUCCESS) = 0)
            {
               if bDebug
               {
                  Debug("failed Q_R2_HAS_COMPLETED_QUEST_ID.");
               }

               return FALSE;
            }
         }

         if First(iR2) = Q_R2_HAS_FAILED_QUEST_ID
         {
            lHistory = Send(quester_wannabe,@GetQuestHistory,#index=Nth(iR2,2));
            iHistory = 0;

            if (lHistory <> $)
            {
               iHistory = First(lHistory) & (~QUEST_HISTORY_MASK);
            }

            if ((iHistory & QUEST_HISTORY_FAILURE) = 0)
            {
               if bDebug
               {
                  Debug("failed Q_R2_HAS_FAILED_QUEST_ID.");
               }

               return FALSE;
            }
         }
      }

      if bDebug
      {
         Debug("passed restrictions!");
      }

      return TRUE;
   }

   CanPlayerEverStartQuest(who = $)
   "Since players can see quests they are ineligible for, we must make a "
   "distinction between factors players could change (e.g. karma) and those "
   "they can't (e.g. quest waiting for someone from a different guild)."
   "Returns FALSE if some factor prevents the player ever getting this quest."
   "Note that returning TRUE does not mean the player can start this quest "
   "at this point in time."
   {
      local iPlayerRestrict, oQuestEngine, oQuest, oQuester, iRestrict,
            lHistory, iHistory, iR2, i;

      oQuestEngine = Send(SYS,@GetQuestEngine);
      iPlayerRestrict = Send(oQuestEngine,@GetQuestPlayerRestrictions,
                              #index=piQuestTemplateIndex);

      // Don't show duplicate quests.
      foreach oQuest in Nth(Send(oQuestEngine,@GetQuestTemplate,
                              #index=piQuestTemplateIndex),QT_ACTIVE_QUESTS)
      {
         foreach oQuester in Send(oQuest,@GetQuesters)
         {
            if who = oQuester
            {
               return FALSE;
            }
         }
      }

      // Don't show newbie quests to non-newbies.
      if (iPlayerRestrict & Q_PLAYER_KILL_MASK)
      {
         iRestrict = (iPlayerRestrict & Q_PLAYER_KILL_MASK);
         if (iRestrict & Q_PLAYER_NEWBIE)
            AND (Send(who,@CheckPlayerFlag,
                  #flag=PFLAG_PKILL_ENABLE) = PFLAG_PKILL_ENABLE)
         {
             return FALSE;
         }
      }

      // Important ones to check here are 'never succeeded' and 'never failed'.
      if (iPlayerRestrict & Q_PLAYER_QUEST_MASK)
      {
         iRestrict = (iPlayerRestrict & Q_PLAYER_QUEST_MASK);
         lHistory = Send(who,@GetQuestHistory,
                        #index=piQuestTemplateIndex);

         if (lHistory <> $)
         {
            iHistory = First(lHistory) & (~QUEST_HISTORY_MASK);
         }

         if (((iRestrict & Q_PLAYER_NOTSUCCEEDED) = Q_PLAYER_NOTSUCCEEDED)
            AND ((iHistory & QUEST_HISTORY_SUCCESS) <> 0))
         {
            return FALSE;
         }

         if (((iRestrict & Q_PLAYER_NOTFAILED) = Q_PLAYER_NOTFAILED )
            AND ((iHistory & QUEST_HISTORY_FAILURE) <> 0))
         {
            return FALSE;
         }
      }

      // Don't show PvP-requiring quests to opt-out players.
      if (iPlayerRestrict & Q_PLAYER_PVP_ENABLED)
         AND Send(who,@CheckPlayerFlag,#flag=PFLAG_PERMA_NO_PVP)
      {
         return FALSE;
      }

      // Don't show quests that aren't assignable, or must be assigned to
      // a different player or player from a different guild.
      foreach iR2 in plPlayerRestrict2
      {
         if First(iR2) = Q_R2_QN_ASSIGNABLE
         {
            if Nth(iR2, 2) = FALSE
            {
               return FALSE;
            }
         }

         if First(iR2) = Q_R2_IS_GUILD_MEMBER_OF
         {
            if (Send(who,@GetGuild) <> Nth(iR2, 2))
               OR (Nth(iR2, 2) = $) // If quester's guild = $, we return false.
            {
               return FALSE;
            }
         }

         if First(iR2) = Q_R2_IS_PLAYER
         {
            if who <> Nth(iR2, 2)
            {
               return FALSE;
            }
         }
      }

      return TRUE;
   }
   
   ModifyPlayerRestrict2(restrict_type=$, inst_num=1, parm1=$, parm2=$)
   "restrict_type chooses which restriction type to modify."
   "inst_num chooses which instance of the restrict_type to modify if "
   " there are more than one. Message returns TRUE if something changed, "
   "FALSE otherwise. $ and invalid parameters are ignored."
   {
      local i;

      // Don't mess with a quest in progress!
      if Send(poQuestNode,@GetStatus) <> QN_STATUS_WAITING_FOR_PLAYERS
      {
         return FALSE;
      }
      
      if plPlayerRestrict2 = $
      {
         Debug("no player restrictions to modify!");

         return FALSE;
      }

      i = 0;
      while i < length(plPlayerRestrict2)
      {
         i = i + 1;
         if First(Nth(plPlayerRestrict2,i)) = restrict_type
         {
            inst_num = inst_num - 1;
            if inst_num = 0
            {
               if restrict_type = Q_R2_QN_ASSIGNABLE
               {
                  if (parm1 <> TRUE)
                  {
                     return FALSE;
                  }
               }
               if restrict_type = Q_R2_IS_GUILD_MEMBER_OF
               {
                  if (parm1 = $) OR (NOT IsClass(parm1, &Guild))
                  {
                     return FALSE;
                  }
               }
               if restrict_type = Q_R2_IS_PLAYER
               {
                  if (parm1 = $) OR (NOT IsClass(parm1, &Player))
                  {
                     return FALSE;
                  }
               }
               if restrict_type = Q_R2_HAS_SKILL
               {
                  if (parm1 = $ and parm2 = $)
                     OR (parm1 <> $ AND NOT IsClass(parm1, &Skill))
                     OR (parm2 <> $ AND (parm2 < 1 or parm2 > 100))
                  {
                     return FALSE;
                  }
               }
               if restrict_type = Q_R2_HAS_SPELL
               {
                  if (parm1 = $ and parm2 = $)
                     OR (parm1 <> $ AND NOT IsClass(parm1, &Spell))
                     OR (parm2 <> $ AND (parm2 < 1 or parm2 > 100))
                  {
                     return FALSE;
                  }
               }
               if restrict_type = Q_R2_HAS_SPELL_SCHOOL
               {
                  if (parm1 = $ and parm2 = $)
                  OR (parm1 <> $ AND (parm1 < 1 or parm1 > 7)) // Incl. dmspells
                  OR (parm2 <> $ AND (parm2 < 1))
                  {
                     return FALSE;
                  }
               }

               if Length(Nth(plPlayerRestrict2,i)) > 1
               {
                  if parm1 <> $
                  {
                     SetNth(Nth(plPlayerRestrict2,i),2,parm1);
                  }
                  if length(Nth(plPlayerRestrict2,i)) > 2
                  {
                     if parm2 <> $
                     {
                        SetNth(Nth(plPlayerRestrict2,i),3,parm2);
                     }
                  }
               }

               return TRUE;
            }
         }
      }

      return FALSE;
   }

   IsWaitingForActivation()
   {
      local i;

      foreach i in plPlayerRestrict2
      {
         if (First(i) = Q_R2_QN_ASSIGNABLE)
            AND (Nth(i,2) = FALSE)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   SetQuesters(questers = $)
   {
      plQuesters = questers;
      return;
   }

   GetQuesters()
   {
      return plQuesters;
   }

   QuestHasMoreNodes()
   {
      if (Length(Nth(Send(Send(SYS,@GetQuestEngine),@GetQuestTemplate,
               #index=piQuestTemplateIndex),QT_QUEST_NODES))
               < (piQuestNodeCounter + 1))
      {
         return FALSE;
      }

      return TRUE;
   }

   AssignNextNode(current_NPC = $)
   {
      local oSNPC, oDNPC, iNextQuestNodeTemplate, bDebug;

      bDebug = Send(Send(SYS,@GetQuestEngine),@GetDebugStatus);

      // Bump quest node counter.
      piQuestNodeCounter = piQuestNodeCounter + 1;

      // Check if more nodes remain.
      iNextQuestNodeTemplate =
            Send(Send(SYS,@GetQuestEngine),@GetNextQuestNode,
                  #quest_template=piQuestTemplateIndex,
                  #counter=piQuestNodeCounter);

      // Remove previous node from NPC's quest node list.
      Send(current_NPC,@RemoveQuestNodeFromActiveList,#node=poQuestNode);

      // If we're all done, clean up and quit.
      if (iNextQuestNodeTemplate = $)
      {
         if bDebug
         {
            Debug("No more nodes in quest.");
         }

         Send(poQuestNode,@Delete);

         // Remove quest from list of active quests of this type.
         Send(Send(SYS,@GetQuestEngine),@RemoveQuestFromActiveList,
               #quest_template=piQuestTemplateIndex,#done_quest=self);

         Post(self,@Delete);

         return;
      }

      // Initialize the next node.
      Send(poQuestNode,@Init,#index=iNextQuestNodeTemplate,
            #owning_quest=self,#waiting_for_players=FALSE);

      // Tell next questnode to assign itself to players.
      Send(poQuestNode,@Assign);

      return;
   }

   SkipCurrentQuestNode()
   "Tells the quest node to complete and advance to the next node."
   {
      if (poQuestNode <> $)
      {
         Send(poQuestNode,@SkipQuestNode);
      }

      return;
   }

   SetQuestNode(node_object=$)
   "Sets this quest's questnode object."
   {
      poQuestNode = node_object;
      return;
   }

   CheckDeadline( time = 0 )
   "Returns FALSE if time expired (and cancels quest), TRUE if time left."
   {
      local iStatus, iTimeLeft, bDebug, iDeadline;

      bDebug = Send(Send(SYS,@GetQuestEngine),@GetDebugStatus);

      if (time = 0)
      {
         Debug("Quest: timelimit = 0?");

         return;
      }

      iDeadline = Send(poQuestNode,@GetDeadline);
      if (iDeadline = 0)
      {
         // Infinite time quest, can't expire.
         return;
      }

      iTimeLeft = iDeadline - time;

      if (iTimeLeft < 1)
      {
         iStatus = Send(poQuestNode,@GetStatus);
         if ((iStatus = QN_STATUS_IN_PROGRESS)
            OR (iStatus = QN_STATUS_AWAITING_MONSTER_DEATH))
         {
            if bDebug
            {
               Debug("No questtime left.");
            }

            Send(poQuestNode,@DeadlineExpired);
            Send(self,@DeadlineExpired);
            // Should be true already, due to DeadlineExpired, but make sure.
            poQuestNode = $;

            return;
         }

         return;
      }

      if bDebug
      {
         Debug("Still have questtime left:", iTimeLeft);
      }

      return;
   }

   DeadlineExpired(bRecreate=FALSE)
   {
      local i, oQE, oNPC, bDebug;

      oQE = Send(SYS, @GetQuestEngine);
      bDebug = Send(oQE,@GetDebugStatus);

      //if bDebug
      //{
      //   Debug("Quest expiring.");
      //}

      if poQuestNode <> $
      {
         // Remove node from NPC's quest node list.
         oNPC = Send(poQuestNode,@GetDestNPC);
         if (oNPC <> $)
         {
            Send(oNPC,@RemoveQuestNodeFromActiveList,#node=poQuestNode);
         }

         // Remove node from awaiting monster death list.
         Send(oQE,@RemoveQNFromAwaitingMonsterDeathList,#QN=poQuestNode);

         // Clean up and quit.
         Send(poQuestNode,@Delete);

         // Remove quest from list of active quests of this type.
         Send(oQE,@RemoveQuestFromActiveList,
               #quest_template=piQuestTemplateIndex,#done_quest=self);
      }
      else
      {
         // Debug("Quest::DeadlineExpired: possible double-expiry going on...");
      }

      if bRecreate
      {
         foreach i in plQuesters
         {
            Send(i,@RemoveCurrentQuest,#index=piQuestTemplateIndex);
         }
      }

      Send(self,@Delete);

      return;
   }

   GetActiveQuestNode()
   {
      return poQuestNode;
   }

   GetQuestTemplateIndex()
   {
      return piQuestTemplateIndex;
   }

   GetQuestNodeTemplateIndex()
   {
      if (poQuestNode = $)
      {
         return -1;
      }

      return Send(poQuestNode,@GetQuestNodeTemplateIndex);
   }

   Cancel(bRecreate=FALSE)
   {
      Send(self,@DeadlineExpired,#bRecreate=bRecreate);
      poQuestNode = $;

      return;
   }

   CancelQuester(quester=$)
   {
      if (plQuesters <> $)
      {
         if (FindListElem(plQuesters,quester))
         {
            // Remove the quest from the player's active quests.
            Send(quester,@RemoveCurrentQuest,#index=piQuestTemplateIndex);

            // Cancel single player quests completely.
            if Length(plQuesters) = 1
            {
               Send(self,@Cancel);

               return;
            }

            plQuesters = DelListElem(plQuesters,quester);
         }
      }

      return;
   }

   Delete()
   {
      poQuestNode = $;
      plPlayerRestrict2 = $;
      plQuesters = $;

      propagate;
   }

   CensusRespond(index=0)
   {
      if index = piQuestTemplateIndex
      {
         // Note that this only counts initialized nodes, since until
         // Init() is called, piQuestTemplateIndex=0
         if poQuestNode = $
         {
            Send(Send(SYS,@GetQuestEngine),@CensusCountDeleted);
            if plPlayerRestrict2 <> $
               OR plQuesters <> $
            {
               Debug("Quest of type ",piQuestTemplateIndex," apparently ",
                     "deleted but still has questers or a restrictions list");
            }
         }
         else
         {
            Send(Send(SYS,@GetQuestEngine),@CensusCountActive,#what=self);
         }
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
